pipeline {
    agent any 
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO_B')
        AWS_DEFAULT_REGION = 'ap-south-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/SwapnaSarita01/Devsecops-3-Tier-Kubernetes-Project'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=three-tier-backend \
                        -Dsonar.projectKey=three-tier-backend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit --noupdate', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'GITHUB', url: 'https://github.com/SwapnaSarita01/Devsecops-3-Tier-Kubernetes-Project'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Devsecops-3-Tier-Kubernetes-Project"
                GIT_USER_NAME = "SwapnaSarita01"
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                   ithCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "swapnasaritakar@gmail.com"  
                            git config user.name "SwapnaSarita01"              
        
                            echo "Build Number: ${BUILD_NUMBER}"
        
                            # Extract current image line
                            imageLine=$(grep -oP 'image:\\s*\\K.*' deployment.yaml)
                            echo "Current Image Line: $imageLine"
        
                            # Extract image repo and tag separately
                            imageRepo=$(echo $imageLine | cut -d':' -f1)
                            oldTag=$(echo $imageLine | cut -d':' -f2)
                            echo "Old Tag: $oldTag"
        
                            # Build new image with updated tag
                            newImage="${imageRepo}:${BUILD_NUMBER}"
                            echo "New Image: $newImage"
        
                            # Replace image tag in deployment.yaml
                            sed -i "s#${imageRepo}:${oldTag}#${newImage}#" deployment.yaml
        
                            # Git commit and push
                            git add deployment.yaml
                            git commit -m "Update frontend deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:master
                        '''
                    }
                }
            }
        }
    }
}
